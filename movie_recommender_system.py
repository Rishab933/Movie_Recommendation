# -*- coding: utf-8 -*-
"""Movie_Recommender_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r4B_iv_q9sN649p_VuhXe7M9jyMuImYo
"""

import numpy as np
import pandas as pd

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head()

print(f"shape of movies: {movies.shape}")
print(f"shape of credits: {credits.shape}")

movies.info()

credits.info()

# Merging the 2 datasets on the bases of their title
df = movies.merge(credits,on='title')
df.shape

# columns that are needed
# genres
# id
# keyword
# title
# overview
# cast
# crew
df = df[['id','title','overview','genres','keywords','cast','crew']]
df.shape

df.head(1)

# Data preprocessing
# Removing missing values and dublicate values

df.isnull().sum()

df.dropna(inplace=True)

df.duplicated().sum()

"""# Now creating 3 columns as id, title and tags"""

df.iloc[0].genres

import ast
def convert(obj):
    l = []
    for i in ast.literal_eval(obj):
        l.append(i['name'])
    return l

df['genres'] = df['genres'].apply(convert)

df.head(1)

df['keywords'] = df['keywords'].apply(convert)

df.head(1)

df.iloc[0].cast

# function for cast
def convert1(obj):
    l = []
    c = 0
    for i in ast.literal_eval(obj):
        if c != 3:
          l.append(i['name'])
          c+=1
        else:
          break
    return l

df['cast'] = df['cast'].apply(convert1)

df.head(1)

df.iloc[0].crew

# we will extract only job = director then its name
def director_fetch(obj):
    l = []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            l.append(i['name'])
            break
    return l

df['crew'] = df['crew'].apply(director_fetch)

df.head(1)

df['overview'].info()
# This overview column is of string data type concatenation with other columns will not be possible
# Therefore converting this also to a list

df['overview'] = df['overview'].apply(lambda x:x.split())

df.head(1)

# Removing space so that tagwords will not be confusing
df['genres'] = df['genres'].apply(lambda x: [i.replace(" ","") for i in x])
df['keywords'] = df['keywords'].apply(lambda x: [i.replace(" ","") for i in x])
df['cast'] = df['cast'].apply(lambda x: [i.replace(" ","") for i in x])
df['crew'] = df['crew'].apply(lambda x: [i.replace(" ","") for i in x])

df.head(1)

# Now creating a new column as tag
df['tags'] = df['overview']+df['genres']+df['keywords']+df['cast']+df['crew']

df.head(1)

# Removing the other columns except id, title and tags
df = df[['id','title','tags']]

df.head(1)

print(df.shape)

# Now converting the tag list to string
df['tags'] = df['tags'].apply(lambda x:" ".join(x))
df['tags'] = df['tags'].apply(lambda x:x.lower())

df.head(1)

df.iloc[0].tags

"""# Text Vectorization - Bag of words"""

# Stemming
import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

df['tags'] = df['tags'].apply(stem)

# Vectorization
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(df['tags']).toarray()

vector.shape

vector[0]

# The most frequent 5000 words
feature_names = cv.get_feature_names_out()
feature_names = feature_names.tolist()
print(feature_names)

# Calulating cosin distance(becaues of high dimensional data) between each pair of movie vector

from sklearn.metrics.pairwise import cosine_similarity
simlarity = cosine_similarity(vector)
simlarity.shape

# Creating a recommendation function which will take a single movies as an input
# and recommend 5 movies of similar type as the output

def recommend(movie):
    index = df[df['title'] == movie].index[0]
    distance = simlarity[index]
    movie_list = sorted(list(enumerate(distance)),reverse=True,key=lambda x:x[1])[1:6]
    for i in movie_list:
        print(df.iloc[i[0]].title)

recommend('Avatar')

import pickle

pickle.dump(df.to_dict(),open('movie_dict.pkl','wb'))

pickle.dump(simlarity,open('simlarity.pkl','wb'))

import sklearn
print("np",np.__version__)
print("pd",pd.__version__)
print("nltk",nltk.__version__)
print("sklearn", sklearn.__version__)